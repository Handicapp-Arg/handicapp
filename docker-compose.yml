services:
  api:
    build:
      context: ./back-handicapp
      dockerfile: Dockerfile
    container_name: handicapp-api
    ports:
      - "3003:3000"
    env_file:
      - ./back-handicapp/.env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-3000}
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-handicapp_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - handicapp-network
    restart: unless-stopped

  front-handicapp:
    build:
      context: ./front-handicapp
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:3003/api/v1}
        NEXT_PUBLIC_APP_ENV: ${NEXT_PUBLIC_APP_ENV:-production}
    container_name: handicapp-front
    ports:
      - "3000:3000"
    env_file:
      - ./front-handicapp/.env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:3003/api/v1}
      NEXT_PUBLIC_APP_ENV: ${NEXT_PUBLIC_APP_ENV:-production}
    networks:
      - handicapp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: handicapp-postgres
    env_file:
      - ./back-handicapp/.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-handicapp_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - handicapp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: handicapp-redis
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    networks:
      - handicapp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  handicapp-network:
    driver: bridge
