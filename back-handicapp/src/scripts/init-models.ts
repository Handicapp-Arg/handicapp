// src/scripts/init-models.ts
// -----------------------------------------------------------------------------
// HandicApp API - Script de Inicializaci√≥n de Modelos
// -----------------------------------------------------------------------------

import { sequelize } from '../config/database';
import { initializeModels } from '../models';
import { seedDatabase } from '../services/seedService';
import { TipoEventoSeedService } from '../services/tipoEventoSeedService';
import { logger } from '../utils/logger';

async function initializeApp() {
  try {
    logger.info('üöÄ Iniciando inicializaci√≥n de la aplicaci√≥n...');

    // 1. Verificar conexi√≥n a la base de datos
    logger.info('üìä Verificando conexi√≥n a la base de datos...');
    await sequelize.authenticate();
    logger.info('‚úÖ Conexi√≥n a la base de datos establecida');

    // 2. Inicializar todos los modelos y sus relaciones
    logger.info('üèóÔ∏è Inicializando modelos y relaciones...');
    initializeModels(sequelize);
    logger.info('‚úÖ Modelos y relaciones inicializados');

    // 3. Sincronizar la base de datos
    logger.info('üîÑ Sincronizando base de datos...');
    if (process.env.NODE_ENV === 'development') {
      // En desarrollo, recrear las tablas
      await sequelize.sync({ force: true });
      logger.info('‚úÖ Base de datos sincronizada (desarrollo - tablas recreadas)');
    } else {
      // En producci√≥n, solo actualizar
      await sequelize.sync({ alter: true });
      logger.info('‚úÖ Base de datos sincronizada (producci√≥n - actualizada)');
    }

    // 4. Ejecutar seeds b√°sicos
    logger.info('üå± Ejecutando seeds...');
    
    // Seed de roles y usuarios b√°sicos
    const seedResult = await seedDatabase();
    if (seedResult) {
      logger.info('‚úÖ Roles y usuarios b√°sicos creados');
    } else {
      logger.warn('‚ö†Ô∏è Error en seed de roles y usuarios');
    }

    // Seed de tipos de evento
    const tipoEventoSeedResult = await TipoEventoSeedService.seedTiposEvento();
    if (tipoEventoSeedResult) {
      logger.info('‚úÖ Tipos de evento creados');
    } else {
      logger.warn('‚ö†Ô∏è Error en seed de tipos de evento');
    }

    logger.info('üéâ Inicializaci√≥n de la aplicaci√≥n completada exitosamente');
    
    // No cerrar la conexi√≥n aqu√≠, se usar√° en la aplicaci√≥n
    return true;

  } catch (error) {
    logger.error('‚ùå Error durante la inicializaci√≥n:', error);
    process.exit(1);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  initializeApp().then(() => {
    logger.info('‚úÖ Script de inicializaci√≥n completado');
    process.exit(0);
  }).catch((error) => {
    logger.error('‚ùå Error en script de inicializaci√≥n:', error);
    process.exit(1);
  });
}

export { initializeApp };